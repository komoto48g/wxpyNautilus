{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"wxpyNautilus","text":"<p>Welcome aboard Nautilus! <sup>1</sup> This is a python package based on matplotlib/wxPython and wx.py.shell extension library.</p> <p>The goal of our journey is the rapid development of image processing (using cv2/pillow) and the graphical user interfaces (using matplotlib/wxpython).  To accomplish this, the framework consists of two main classes:</p> <ol> <li> <p>A plugin-style GUI mainframe</p> <p>A <code>Plugin</code> means a python script file to process images,  which user can load, edit, reload, unload, and debug without terminating the program.</p> <p></p> </li> <li> <p>An interactive shellframe</p> <p>You can communicate with the main process using an interactive shell,  inspect, test, and debug the code at runtime.</p> <p></p> </li> </ol>"},{"location":"index.html#getting-started","title":"Getting Started","text":""},{"location":"index.html#prerequisites","title":"Prerequisites","text":"<p>This software works with Python 3.8 and later versions.</p> <ol> <li> <p>Download the zip file from wxpyNautilus GitHub repository     and extract it to a suitable directory.</p> </li> <li> <p>Install mwxlib from PyPI.</p> <pre><code>$ pip install mwxlib\n</code></pre> </li> </ol> <p>The mwxlib depends on the following packages:</p> <ul> <li>wxPython (Phoenix)</li> <li>matplotlib</li> <li>numpy</li> <li>pillow</li> <li>opencv-python</li> </ul> <ol> <li> <p>\"Nautilus\" is named after my favorite novel   \u6d77\u5e95\u4e8c\u4e07\u91cc : Twenty Thousand Leagues Under the Seas written by Jules Verne.\u00a0\u21a9</p> </li> <li> <p>For Python 3.6 -- 3.9, wxpython &gt;= 4.1.1 is required.   For Python 3.10, wxpython &gt;= 4.2.0 is required.    You can also download the latest snapshot from https://wxpython.org/Phoenix/snapshot-builds/.\u00a0\u21a9</p> </li> </ol>"},{"location":"0-0_showcase.html","title":"Showcase","text":""},{"location":"0-0_showcase.html#wing-of-phoenix","title":"Wing of Phoenix","text":"<p>Gumowski-Mira Map as known as <code>Mythic Bird</code>.</p> <p></p> <p>source file: demo/GM-map-layer.py</p> <p>See also: http://www.atomosyd.net/spip.php?article98</p>"},{"location":"0-1_shellframe.html","title":"Shell standalone","text":"<p>Move to wxpyNautilus directory and run \"debut.py\" to startup REPL::</p> <pre><code>$ py -3 debut.py\n</code></pre> <p>Note</p> <ul> <li> <p>mwxlib creates ~/.mwxlib/ in your home directory.   This includes history, logs, dump files used to report when an error occurs.</p> </li> <li> <p>At the first startup, it takes some time to collect module information and create a dictionary.   The collected module name is used for completion at the time of input in the shell.   If you start the shell while pressing [C-S-], the dictionary will be recreated.</p> </li> </ul>"},{"location":"0-1_shellframe.html#basic-access","title":"Basic access","text":"<p>Objects in the process can be accessed through <code>self</code> and <code>this</code>, e.g.,</p> <pre><code>&gt;&gt;&gt; self\n&gt;&gt;&gt; this\n&gt;&gt;&gt; self.shell\n</code></pre> <p></p> <p>Tip</p> <ul> <li>The <code>self</code> is the target object of the shell, that is, <code>__main__</code> module in the startup root shell.</li> <li>The <code>this</code> is the module that includes <code>self</code>.</li> <li>The <code>self.shell</code> is a special variable that points to the current shell instance.</li> </ul> <p>There are many shortcut keys defined as default. Hereafter, we use the following abbreviations:</p> <pre><code>* [C-x] Control (Command) + x.\n* [M-x] Alt (Meta) + x.\n* [S-x] Shift + x.\n* [C-x y] press [C-x] followed by [y] (aka. two-stroke key)\n</code></pre>"},{"location":"0-2_inspector.html","title":"How to inspect","text":""},{"location":"0-2_inspector.html#autocomp","title":"Autocomp","text":"<p>Typing a dot [.] automatically invokes word-comp-mode and the autocompletion list popups at the caret. It can also be invoked manually by pressing [M-.]. Word-comp-mode displays a list of keys in the object that matches the entered word.</p> <pre><code>&gt;&gt;&gt; self.sh|\n           ^ press [M-.]\n</code></pre> <p></p> <p>Another useful autocomp function is apropos-comp-mode, which can be invoked by pressing [M-/]. Apropos-comp-mode displays a list of keys in the object searched for the entered word.</p> <pre><code>&gt;&gt;&gt; self.sh|\n           ^ press [M-/]\n</code></pre> <p></p>"},{"location":"0-2_inspector.html#apropos","title":"Apropos","text":"<p>Similar to the apropos-comp-mode, there is apropos command that outputs keys and values in the object searched for the entered word.</p> <p>Apropos command is especially useful to inspect what attributes an object has or has not. Suppose that you want to know what kind of blurring functions are contained in <code>cv2</code> module. You can inspect it by typing:</p> <pre><code>&gt;&gt;&gt; cv2.blur?\n</code></pre> <p></p> <p>You can see two things. 1. There are three kind of blurring functions; 2. There are no functions other than these three blurring functions.</p> <p>Tip</p> <p>The argspec information is displayed on the statusbar as you move the caret over the output string.</p> <p>Apropos command uses <code>dir()</code> to list as many attributes as possible.</p> <pre><code>&gt;&gt;&gt; self.sh?\n</code></pre> <p></p> <p>It can be combined with predicates that placed after <code>?</code> as follows:</p> <pre><code>&gt;&gt;&gt; self.sh? atom\n&gt;&gt;&gt; self.sh? callable\n</code></pre> <p></p> <p>Tip</p> <p>The syntax of apropos command is as follows:</p> <pre><code>&gt;&gt;&gt; x.y? [not] p\n</code></pre> <p><code>p</code> can be any predicates such as <code>atom</code>, <code>callable</code>, <code>type (e.g., int, str, ...)</code>,  <code>inspect</code> functions, and a combination of those using <code>not, and, or</code> operators.</p> <p>Let's take a look at the predicates available in the <code>inspect</code> module, which starts with 'is',</p> <pre><code>&gt;&gt;&gt; inspect.^is? callable\n</code></pre> <p>which gives,</p> <p></p>"},{"location":"0-2_inspector.html#tooltip","title":"Tooltip","text":"<p>While typing, you may want to check if the code and the syntax is correct. Pressing [C-j] shows a tooltip of evaluated results for the selected word or line.</p> <pre><code>&gt;&gt;&gt; cv2.GaussianBlur|\n                    ^ press [C-j]\n</code></pre> <p></p> <p>Pressing [C-h] shows a tooltip of argspec for the selected word. </p> <pre><code>&gt;&gt;&gt; cv2.GaussianBlur|\n                    ^ press [C-h]\n</code></pre> <p></p> <p>If the tooltip text is too long to display, it will be snipped. If you want to read the document, click the tooltip. Then, the full text will be displayed in the Help window. The help window can also be displayed by typing <code>@help</code> after the object for which you want documentation.</p> <pre><code>&gt;&gt;&gt; cv2.GaussianBlur @help\n</code></pre> <p></p>"},{"location":"0-3_debugger.html","title":"How to debug","text":""},{"location":"0-3_debugger.html#command-hook","title":"command-hook","text":"<p>In command-hook mode, you can specify the function to debug in the shell prompt. Here, we take the shell function <code>about()</code> as an example.</p> <pre><code>&gt;&gt;&gt; self.shell.about()\n</code></pre> <p></p> <p>To enter debug mode, type <code>@debug</code> after the normal function call:</p> <pre><code>&gt;&gt;&gt; self.shell.about() @debug\n</code></pre> <p>Key bindings for debugger::</p> <pre><code>C-g     : quit\nC-q     : quit\nC-n     : next   (step-over)\nC-s     : step   (step-in)\nC-r     : return (step-out)\nC-b     : set a breakpoint at the current line.\nC-@     : jump to the first-lineno of the code.\n</code></pre> <p>After exiting debug mode, you can check the stack frames::</p> <pre><code>f10     : grep frame forward\nS-f10   : grep frame backward\n</code></pre> <p>If you want to view the code, right click Log tab and select the file. If you want to view the debugging log, select <code>*log*</code> buffer.</p>"},{"location":"0-3_debugger.html#trace-hook","title":"trace-hook","text":"<p>In trace-hook mode, you can specify the function to debug in Log window.</p> <ol> <li> <p>Select the file in Log window.     If the file is not found, it can be loaded by placing the cursor on the target and pressing [f2].     <pre><code>&gt;&gt;&gt; function|\n            ^ Press [f2] to load the file in **Log** window where the function is defined.\n</code></pre></p> </li> <li> <p>Press [C-S-space] in Log window to set a trace pointer (=&gt;) where you want to break at.</p> <p>Note</p> <p>The system is about 2-3 times slower while tracing. To quit tracing, press [C-g].</p> </li> <li> <p>If the system reached the breakpoint, the root shell enters debug mode.</p> <p> </p> </li> </ol> <p>Note that the debugger doesn't stop until it reached the bottom frame, in this case, shell input frame. Since the shell input is executed in the mainloop i.e., the main-thread, it will enter <code>EVT_IDLE</code> handler endlessly. In this case, press [C-g] to exit the debug mode.</p>"},{"location":"0-3_debugger.html#event-hook","title":"event-hook","text":"<p>In event-hook mode, you can specify the event handler to debug in Monitor window.</p> <ol> <li> <p>Move to Inspector window.</p> </li> <li> <p>Right-click the target widget and select [Watch the event] menu.     Then, it starts monitoring wx events.</p> </li> <li> <p>Tick the checkboxes of the events you want to hook.     Blue string indicates that the event handler is user-defined and hookable.</p> </li> <li> <p>When the event is fired and the handler is called, the current shell enters debug mode.</p> <p> </p> </li> </ol> <p>Note</p> <p>Since ver 0.75, monitor and inspector windows will be included in the watcher window.</p> <p>Tip</p> <p>Press [F11] to show ghost window containing buffer/editor, monitor, and inspector windows. Press [S-f11] to show the watcher window containing globals and locals lists.</p> <p>Key bindings for the shellframe::</p> <pre><code>f11     : toggle_window&lt;'Toggle ghost'&gt;\nS-f11   : toggle_window&lt;'Toggle watcher'&gt;\n</code></pre>"},{"location":"0-4_dive.html","title":"How to dive","text":""},{"location":"0-4_dive.html#scratch","title":"Scratch","text":"<p>Scratch window is a scratch notebook of code snippets similar to emacs <code>*scratch*</code> buffer. You can open, close, and save the script file in the buffer.</p> <p>You can also debug the code in the following step:</p> <ol> <li> <p>In Scratch window, select the buffer you want to debug.</p> </li> <li> <p>Pressing [M-j] compiles the code and evaluetes it in the currently selected shell namespace.     The code \"\" now can be referenced from the debugger of the shell. <li> <p>Then, you can debug the code using :ref:<code>command-hook</code> and :ref:<code>trace-hook</code> as well as the Log window.</p> <p> </p> </li> <p>Key bindings of Scratch::</p> <pre><code>C-x C-o     : open\nC-x C-s     : save\nC-x S-s     : saveas\nC-x C-l     : load\nC-x C-k     : kill-buffer\nC-x k       : kill-all-buffers\nC-x C-n     : new-buffer\nM-j         : exec-buffer\nC-j         : eval-line\n</code></pre>"},{"location":"0-4_dive.html#magic-syntax","title":"Magic syntax","text":"<p>Nautilus shell accepts some magic syntaxes e.g.,</p> <pre><code>&gt;&gt;&gt; x`y\n# interpreted as (quoteback):\n# ==&gt; y=x\n\n&gt;&gt;&gt; x@y\n# interpreted as (pullback):\n# ==&gt; y(x)\n</code></pre> <p>For example, <pre><code>&gt;&gt;&gt; 5 @range @list @p\n[0, 1, 2, 3, 4]\n</code></pre></p> <p>In Ruby, one of the popular programming languages, you can chain methods like this:</p> <pre><code>irb&gt; p 5.times.to_a\n[0, 1, 2, 3, 4]\n</code></pre> <p>Note that in contrast of Ruby, it can also chain <code>p (print)</code> function. Actually, it can chain not only methods but also any functions as follows:</p> <pre><code>&gt;&gt;&gt; buf @io.BytesIO @Image.open @np.asarray @plt.imshow; plt.show()\n# interpreted as:\n==&gt; plt.imshow(np.asarray(Image.open(io.BytesIO(buf)))); plt.show()\n</code></pre> <p>.. seealso::</p> <pre><code>The name \"pullback\" comes from mathematical terminology.\nPullback is like a mathematically defined synonym of substitution.\nhttps://en.wikipedia.org/wiki/Pullback\n</code></pre>"},{"location":"0-4_dive.html#built-in-utilities","title":"Built-in utilities","text":"<p>Nautilus has some useful functions in <code>builtin</code> module::</p> <pre><code>@p          Synonym of print.\n@pp         Synonym of pprint.\n@info       Short info.\n@help       Full description.\n@load       Load file in Log buffer.\n@where      Displays filename:lineno or the module name.\n@mro        Displays mro list and filename:lineno or the module name.\n@dive       Clone the shell with new target.\n@debug      Open pdb or event-monitor.\n@timeit     Measure the duration cpu time (per one execution).\n@profile    Profile a single function call.\n@filling    Inspection using ``wx.lib.filling.Filling``.\n@watch      Inspection using ``wx.lib.inspection.InspectionTool``.\n</code></pre>"},{"location":"0-4_dive.html#pprint-pppprint-filling","title":"p(print) / pp(pprint) / filling","text":"<pre><code>&gt;&gt;&gt; self.shell.handler @p\n# Display shell key bindings.\n</code></pre> <p>The special object handler is like DNA, defining how the object interact in a process. In fact, it is a simple dictionary of Finite State Machine (FSM) that maps states to transitions and actions.</p> <p>In this case, ['C-x'] state has the key-event ['@ pressed'], thus two-stroke typing [C-x @] invokes <code>goto_marker</code> which moves the caret to the marker (o) position.</p> <p>You can also use fancy view of the key bindings using <code>PyFilling</code> window.</p> <pre><code>&gt;&gt;&gt; self.shell.handler @filling\n# Show shell key bindings in ``PyFilling`` window.\n</code></pre> <p></p>"},{"location":"0-4_dive.html#where-load-mro","title":"where / load / mro","text":"<p>The command <code>where</code> is used to find the source code.</p> <pre><code>&gt;&gt;&gt; self.shell @where\n# Displays the source code filename:lineno.\n</code></pre> <p></p> <p>Default Log window can be used to open the file.</p> <pre><code>&gt;&gt;&gt; self.shell @load\n# Loads the source code in **Log** window.\n</code></pre> <p></p> <p>If you like to open the file with your editor, define a function <code>edit('filename:lineno')</code> somewhere such as 'PYTHONSTARTUP' script file. Then, you can open the file like this:</p> <pre><code>&gt;&gt;&gt; self.shell @where @edit\n</code></pre> <p>The command <code>mro</code> displays mro list of the object with filename:lineno. You can grep those files if exist, using [f10]: grep-forward, [S-f10]: grep-backward.</p> <pre><code>&gt;&gt;&gt; self.shell.handler @mro\n# Displays mro list and filename:lineno or the module name.\n</code></pre> <p></p>"},{"location":"0-4_dive.html#dive","title":"dive","text":"<p>The command <code>dive</code> is equiv. to <code>rootshell.clone</code> which creates a new shell with the specified target in the new page.</p> <pre><code>&gt;&gt;&gt; self.shell @dive\n# Clone the shell with the specified target.\n# In this case, that target is the ``rootshell&lt;Nautilus&gt;`` itself.\n</code></pre> <p></p>"},{"location":"0-5_mainframe.html","title":"Mainframe","text":"<p>Move to wxpyNautilus directory and run \"wxNautilus.py\"::</p> <pre><code>$ py -3 wxpyNautilus.py\n</code></pre> <p></p>"},{"location":"0-5_mainframe.html#basic-operation","title":"Basic operation","text":"<p>You can load plugins, image, and media files with DnD. This shows the demonstration of plugin <code>\"demo/template.py\" &lt;https://github.com/komoto48g/mwxlib/blob/main/demo/template.py&gt;</code>_</p> <p>The graphic window is made with matplotlib and some keys associated with the matplotlib interface are defined as follows:</p> <p>Global bindings::</p> <pre><code>[C-Ldrag] Pan move.\n[C-Rdrag] Pan zoom.\n[C-+/-] Zoom up/down (center-orientred).\n[C-wheelup/wheeldown] Zoom up/down (mouse-orientred).\n[M-a] fit-to-canvas.\n[C-a] update-axis to home position.\n[home] ditto\n</code></pre> <p>X/Y-axis bindings::</p> <pre><code>[Ldrag] Drag the axis.\n[C-Ldrag] Zoom the axis.\n[C-S-Ldrag] Zoom-edge.\n</code></pre> <p>Selector mode bindings::</p> <pre><code>Pressing [Lbutton] sets selection to a point.\nPressing [S-Lbutton] sets selection to plural points (draw a polygon).\n\n[Ldrag] Draw a line or moves the edge or the lines.\n[S-Ldrag] Draw a line at an angle of 0, 45, or 90 degrees.\n[delete] Delete the selection.\n[escape] ditto.\n</code></pre> <p>Loupe mode bindings::</p> <pre><code>Pressing [z] transits to zoom-mode.\n\n[Ldrag] Zoom in.\n[Rdrag] Zoom out.\n</code></pre> <p>Marker mode bindings::</p> <pre><code>Pressing [c] converts selector to markers.\n\n[n] move-to-next-marker.\n[p] move-to-previoius-marker.\n[Ldrag] Move the selected marker.\n[delete] Delete the selected marker.\n[escape] Exit marker-mode.\n</code></pre> <p>Region mode bindings::</p> <pre><code>Pressing [r] converts selector to a region.\n\n[Ldrag] Move the selected region.\n[M-Ldrag] Draw square region.\n[r-Ldrag] Draw rectangle region.\n[S-Ldrag] Draw rectangle region at an angle of 0, 45, or 90 degrees.\n[delete] Delete the region.\n[escape] Exit region-mode.\n</code></pre> <p>Tip</p> <p>The startup configuration is described in \"siteinit.py\" where plugins and key bindings are defined in <code>init_mainframe(self)</code> function. Please change <code>self.Editor</code> that is called when editing the plugin.</p>"},{"location":"0-5_mainframe.html#basic-access-to-plugins","title":"Basic access to plugins","text":"<p>Right-click on the plugin's panel and select the menu <code>Dive into ...</code> to open the plugin's shell.</p> <p></p> <p>From the shell, you can access objects:</p> <pre><code>&gt;&gt;&gt; self\n# A plugins object.\n&gt;&gt;&gt; self.parent\n# A parent (mainframe) object.\n&gt;&gt;&gt; self.graph\n# A reference of parent graph view (left view pane).\n&gt;&gt;&gt; self.output\n# A reference of parent output view (right view pane).\n&gt;&gt;&gt; self.graph.frame\n# Currently selected graph frame proxy of &lt;matplotlib.image.AxesImage&gt;.\n&gt;&gt;&gt; self.graph.buffer\n# Currently selected graph frame.buffer array.\n</code></pre>"},{"location":"1_intro.html","title":"ShellFrame GUI","text":"<p>Nautilus consists of three notebook windows.</p> <ol> <li> <p>Console, a multi-page shells based on <code>wx.py.shell.Shell</code></p> </li> <li> <p>Ghost, a helper window consists of multi-buffer editors, monitor, and inspector panes:</p> <ul> <li>Eitors (Scratch, Log, Help, History, and Config)</li> <li>Bookshelf</li> </ul> </li> <li> <p>Watchdog</p> <ul> <li>Globals and locals watchers</li> <li>Event monitor based on <code>wx.lib.eventwatcher.EventWatcher</code></li> <li>Widget inspector based on <code>wx.lib.inspection.InspectionTool</code></li> </ul> </li> </ol> <p></p>"},{"location":"1_intro.html#ghost-in-the-shell","title":"Ghost in the shell","text":""},{"location":"1_intro.html#scratch","title":"Scratch","text":"<p>Scratch window is a scratch notebook of code snippets similar to emacs <code>*scratch*</code> buffer. You can open, close, and save the script file in the buffer.</p>"},{"location":"1_intro.html#log","title":"Log","text":"<p>Log window is a logger of debugger and is used to view frames. Log window is also used to display history of shells input. The history shows the actual command text pushed to the interpreter.</p>"},{"location":"1_intro.html#help","title":"Help","text":"<p>Help window is a viewer of help string. Nautilus doesn't display help text in the shell as normal interpreters, but piped them to the help buffer.</p>"},{"location":"1_intro.html#watchdog-in-the-shell","title":"Watchdog in the shell","text":""},{"location":"1_intro.html#wahtchers-for-globals-and-locals","title":"Wahtchers for globals and locals","text":"<p>Watchers for globals and locals show the list in debug mode.</p>"},{"location":"1_intro.html#monitor","title":"Monitor","text":"<p>Monitor window is used to display wx widgets events, based on <code>wx.lib.eventwatcher.EventWatcher</code>.</p>"},{"location":"1_intro.html#inspector","title":"Inspector","text":"<p>Inspector window is used to display wx widgets tree, based on <code>wx.lib.inspection.InspectionTool</code>.</p>"},{"location":"2_inspect.html","title":"Introspection","text":""},{"location":"2_inspect.html#autocomp","title":"Autocomp","text":"<p>Typing a dot [.] automatically invokes word-comp-mode, and [escape] exits the comp-mode.</p> <p>Word-comp [M-.] displays a list of keys in the object that matches the entered word. </p> <p>Apropos-comp [M-/] displays a list of keys in the object searched for the entered word.</p> <p></p> <p>cf. Apropos command outputs keys and values in the object searched for the entered word.</p> <p></p> <p>Text-history [M-,] displays a list of text that matches text previously displayed to the shell.</p> <p></p> <p>Module-comp [M-m] displays a list of modules that matches the entered word, which is invoked when typing <code>import</code> or <code>from-import</code>.</p> <p></p> <p>There are five comp-modes as follows. All completions [1--5] are incremental when pressed any alnums, and decremental when backspace.</p> <p>Autocomp key bindings::</p> <pre><code>C-up        : [0] retrieve previous history\nC-down      : [0] retrieve next history\nTAB         : [1] history-comp-mode\nM-p         : [1] retrieve previous history in comp-mode\nM-n         : [1] retrieve next history in comp-mode\nM-.         : [2] word-comp-mode\nM-/         : [3] apropos-comp-mode\nM-,         : [4] text-comp-mode\nM-m         : [5] module-comp-mode\n</code></pre>"},{"location":"2_inspect.html#apropos","title":"Apropos","text":"<p>Apropos command outputs keys and values in the object <code>x</code> using <code>dir(x)</code> searched for the entered hint word <code>y</code> with &amp;optional <code>p:predicates</code>.</p> <pre><code>&gt;&gt;&gt; x.y? [not] p\n# equiv.\n&gt;&gt;&gt; apropos(x, y [,ignorecase=?:True,??:False] [,pred=p])\n</code></pre> <ul> <li>x: root object,</li> <li>y: hint that can contain regular expressions,<ul> <li><code>y</code> can contain regex, but not a dot.</li> <li><code>y</code> can contain abbreviations: \\a:=[a-z], \\A:=[A-Z].</li> </ul> </li> <li>p: predicates that can be either the following predicate or a combination of those using not, and, or.<ul> <li><code>p</code> can be <code>atom</code>, <code>callable</code>, <code>type (e.g., int, str, ...)</code>, and <code>inspect</code> functions such as    <code>isclass, ismodule, ismethod, isbuiltin, isfunction, isgenerator, isframe, iscode, istraceback</code>, etc.</li> </ul> </li> </ul> <p></p>"},{"location":"2_inspect.html#tooltip","title":"Tooltip","text":"<p>Tooltips are used to display object values and function argspecs.</p> <ul> <li>[C-j] shows a tooltip of evaluated results for the selected word or line.</li> <li>[C-h] shows a tooltip of argspec for the selected word. </li> </ul> <p></p> <p></p> <p>If the tooltip text is too long to display, it will be snipped. When you click the tooltip, the entire text is displayed in the Help window.</p> <p></p> <p>One of following typing shows full description about <code>x</code>.</p> <pre><code>&gt;&gt;&gt; x @help\n# or\n&gt;&gt;&gt; x @??\n# or\n&gt;&gt;&gt; ?? x\n</code></pre> <p>One of following typing shows short information about <code>x</code>.</p> <pre><code>&gt;&gt;&gt; x @info\n# or\n&gt;&gt;&gt; x @?\n# or\n&gt;&gt;&gt; ? x\n</code></pre>"},{"location":"3_debug.html","title":"Debugger","text":"<p>Nautilus debugger is based on <code>pdb</code>. In addition, some shortcut keys can be used to step-in, out, and over the stack frames. There are three ways to enter debug mode.</p> <ol> <li> <p>command-hook</p> <p>Specify the function to debug in the shell prompt.</p> </li> <li> <p>trace-hook</p> <p>Specify the function to debug in the traceable window. \"Traceable\" here means that the pointer can be set and the system can hook the point. Log, Scratch, and Config windows are traceable by default.</p> </li> <li> <p>event-hook</p> <p>Specify the event handler to debug in the monitor window.</p> </li> </ol> <p>Key bindings::</p> <pre><code>C-g     : quit\nC-q     : quit\nC-n     : next   (step-over)\nC-s     : step   (step-in)\nC-r     : return (step-out)\nC-b     : set a breakpoint at the current line.\nC-@     : jump to the first-lineno of the code.\n</code></pre>"},{"location":"3_debug.html#command-hook","title":"command-hook","text":"<p>Typing function you want to debug followed by <code>@debug</code> enters debug mode in the shell as follows:</p> <pre><code>&gt;&gt;&gt; f(...) @debug\n</code></pre> <p>Then, Log and Wacher windows will popup to display the current frame and the local variables. The mark (o) indicates the entry point of the code.  The pointer (=&gt;) indicates the position of the current frame.</p> <p></p>"},{"location":"3_debug.html#trace-hook","title":"trace-hook","text":"<p>Press [C-S-space] in Log window to set a trace pointer (=&gt;) where you want to break at. When the frame reached the point, the shell goes to the debug mode.</p> <p></p> <p>Note</p> <p>The system is about 2-3 times slower while tracing. To quit tracing, press [C-g].</p> <p>Tip</p> <p>To display the function, type in the shell as follows:</p> <pre><code>&gt;&gt;&gt; f @load\n</code></pre> <p>Or, press [f2] key when the caret is at the function.</p> <pre><code>&gt;&gt;&gt; f|\n     ^ press [f2] key\n</code></pre>"},{"location":"3_debug.html#event-hook","title":"event-hook","text":"<p>This mode is for wx.Event handlers that need to be called with proper event arguments.</p> <p>Move to Inspector window. Right-click the target widget and select [Watch the event] menu.</p> <p></p> <p>You can monitor the events bound to the target widgets in Monitor window. Tick the checkboxes of the events you want to hook, where blue string indicates that the event handler is user-defined and hookable.</p> <p>When the event is fired and the handler is called, the shell goes to the debug mode.</p> <p></p>"},{"location":"4_apiref.html","title":"API Reference","text":""},{"location":"4_apiref.html#wxNautilus","title":"<code>wxNautilus</code>","text":"<p>The frontend of Graph and Plug manager</p> <p>Classes:</p> <ul> <li> <code>MainFrame</code>           \u2013            <p>the Frontend of Graph and Plug manager</p> </li> </ul>"},{"location":"4_apiref.html#wxNautilus.MainFrame","title":"<code>MainFrame</code>","text":"<p>               Bases: <code>Frame</code></p> <p>the Frontend of Graph and Plug manager</p> Source code in <code>wxNautilus.py</code> <pre><code>class MainFrame(Frame):\n    \"\"\"the Frontend of Graph and Plug manager\n    \"\"\"\n    Name = \"wxpyNautilus\"\n\n    def About(self):\n        info = wx.adv.AboutDialogInfo()\n        info.Name = self.Name\n        info.Version = __version__\n        info.Copyright = __copyright__ +' '+ __author__\n        info.License = __license__\n        info.Description = __doc__\n        info.Developers = []\n        info.DocWriters = []\n        info.Artists = []\n        info.SetWebSite(\"https://github.com/komoto48g\")\n        wx.adv.AboutBox(info)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.SetIcon(submarine.GetIcon())\n\n        HOME = os.path.dirname(__file__)\n        for f in [\n                HOME,   # Add ~/ to import si:home\n                '',     # Add ./ to import si:local first\n                ]:\n            if f not in sys.path:\n                sys.path.insert(0, f)\n        try:\n            si = __import__('siteinit')\n        except ImportError:\n            print(\"- No siteinit file.\")\n        else:\n            print(f\"Executing {si.__file__!r}\")\n            si.init_mainframe(self)\n        try:\n            import debut\n            debut.stylus(self.shellframe)\n        except ImportError:\n            pass\n</code></pre>"},{"location":"4_apiref.html#siteinit","title":"<code>siteinit</code>","text":"<p>siteinit file</p> <p>Functions:</p> <ul> <li> <code>init_mainframe</code>             \u2013              <p>Set up the main frame.</p> </li> </ul>"},{"location":"4_apiref.html#siteinit.init_mainframe","title":"<code>init_mainframe(self)</code>","text":"<p>Set up the main frame.</p> Source code in <code>siteinit.py</code> <pre><code>def init_mainframe(self):\n    \"\"\"Set up the main frame.\n    \"\"\"\n    ## Image/CCD unit length per pixel [mm/pix]\n    self.graph.unit = self.output.unit = 0.05\n\n    ## Cutoff tolerance of the score percentile\n    self.graph.score_percentile = 0.05\n    self.output.score_percentile = 0.05\n\n    ## matplotlib/wxagg backend\n    ## Restrict imshow sizes max &lt;= 24e6 (bytes typ.)\n    ## self.graph.nbytes_threshold = 8e6\n    ## self.output.nbytes_threshold = 8e6\n\n    ## window layout\n    self.histogram.modeline.Show()\n\n    ## --------------------------------\n    ## Plugins\n    ## --------------------------------\n\n    from mwx.plugins import frame_listview, line_profile, fft_view\n    self.load_plug(frame_listview)\n    self.load_plug(line_profile)\n    self.load_plug(fft_view)\n\n    ## --------------------------------\n    ## Global keymap of the main Frame \n    ## --------------------------------\n\n    self.define_key('C-x o', self.load_session)\n    self.define_key('C-x s', self.save_session)\n    self.define_key('C-x S-s', self.save_session_as)\n</code></pre>"},{"location":"4_apiref.html#debut","title":"<code>debut</code>","text":"<p>deb utilus ver 1.0rc</p> <p>Functions:</p> <ul> <li> <code>init_stc_interface</code>             \u2013              <p>Customize the common keymaps.</p> </li> <li> <code>init_buffer</code>             \u2013              <p>Customize the keymaps of the Buffer.</p> </li> <li> <code>init_editor</code>             \u2013              <p>Customize the keymaps of the Editor.</p> </li> <li> <code>init_shell</code>             \u2013              <p>Customize the keymaps of the Shell.</p> </li> <li> <code>stylus</code>             \u2013              <p>Stylize Nautilus window.</p> </li> </ul>"},{"location":"4_apiref.html#debut.init_stc_interface","title":"<code>init_stc_interface(self)</code>","text":"<p>Customize the common keymaps.</p> Source code in <code>debut.py</code> <pre><code>def init_stc_interface(self):\n    \"\"\"Customize the common keymaps.\n    \"\"\"\n    @self.define_key('f9')\n    def toggle_wrap_mode():\n        mode = ['no-wrap',\n                'word-wrap',\n                'char-wrap',\n                'whitespace-wrap'\n                ]\n        self.WrapMode = (self.WrapMode + 1) % 4\n        self.post_message(\"\\b {!r}\".format(mode[self.WrapMode]))\n\n    @self.define_key('S-f9')\n    def toggle_eol_view():\n        self.ViewEOL = not self.ViewEOL\n        self.ViewWhiteSpace = not self.ViewWhiteSpace\n\n    self.define_key('M-S-,', self.beginning_of_buffer)  # M-&lt;\n    self.define_key('M-S-.', self.end_of_buffer)        # M-&gt;\n    self.define_key('C-x [', self.beginning_of_buffer)\n    self.define_key('C-x ]', self.end_of_buffer)\n    self.define_key('C-c C-c', self.goto_matched_paren)\n    self.define_key('C-x C-x', self.exchange_point_and_mark)\n\n    @self.define_key('C-x left', expand=0)\n    @self.define_key('C-x right', expand=1)\n    @self.define_key('C-x ,', expand=0)\n    @self.define_key('C-x .', expand=1)\n    def fold(expand):\n        lc, le = self.get_indent_region(self.cline)\n        self.FoldLine(lc, expand)\n\n    @self.define_key('C-x S-left', expand=0)\n    @self.define_key('C-x S-right', expand=1)\n    @self.define_key('C-x S-,', expand=0)\n    @self.define_key('C-x S-.', expand=1)\n    def fold_all(expand):\n        self.FoldAll(expand)\n        self.recenter()\n</code></pre>"},{"location":"4_apiref.html#debut.init_buffer","title":"<code>init_buffer(self)</code>","text":"<p>Customize the keymaps of the Buffer.</p> Source code in <code>debut.py</code> <pre><code>def init_buffer(self):\n    \"\"\"Customize the keymaps of the Buffer.\n    \"\"\"\n    ## Buffer text control\n    init_stc_interface(self)\n\n    @self.define_key('enter')\n    def newline_and_indent():\n        n = self.py_electric_indent()\n        self.AddText(os.linesep + ' ' * n)\n\n    @self.define_key('C-enter')\n    def newline_and_indent_eol():\n        n = self.py_electric_indent()\n        self.goto_char(self.eol)\n        self.AddText(os.linesep + ' ' * n)\n\n    @self.define_key('C-S-enter')\n    @self.define_key('S-enter')\n    def open_line_and_indent():\n        n = self.py_current_indent()\n        self.goto_char(self.bol)\n        self.InsertText(self.bol, ' ' * n + os.linesep)\n        self.goto_char(self.cpos + n)  # relative indentation position\n\n    @self.define_key('M-w')\n    def copy_region():\n        self.anchor = self.mark\n        self.Copy()\n\n    @self.define_key('C-w')\n    def kill_region():\n        self.anchor = self.mark\n        self.Cut()\n\n    @self.define_key('C-x C-insert')\n    def copy_line():\n        text, lp = self.CurLine\n        Clipboard.write(\"{}:{}:\\n{}\".format(self.filename, self.cline+1, text))\n</code></pre>"},{"location":"4_apiref.html#debut.init_editor","title":"<code>init_editor(self)</code>","text":"<p>Customize the keymaps of the Editor.</p> Source code in <code>debut.py</code> <pre><code>def init_editor(self):\n    \"\"\"Customize the keymaps of the Editor.\n    \"\"\"\n    self.define_key('C-x k',   self.kill_all_buffers)\n    self.define_key('C-x C-k', self.kill_buffer)\n    self.define_key('C-x C-n', self.new_buffer)\n    self.define_key('C-x C-l', self.load_buffer)\n    self.define_key('C-x s',   self.save_all_buffers)\n    self.define_key('C-x C-s', self.save_buffer)\n    self.define_key('C-x S-s', self.save_buffer_as)\n    self.define_key('C-x C-f', self.find_file)\n\n    @self.define_key('S-f5', load=True)\n    @self.define_key('f5')\n    def eval_buffer(evt, load=False):\n        if load:\n            self.load_buffer()\n        self.buffer.exec_region()\n\n    @self.define_key('C-S-f9')\n    def load_file():\n        text = self.buffer.SelectedText or self.buffer.expr_at_caret\n        filename = os.path.join(os.path.dirname(self.buffer.filename), text)\n        if self.load_file(filename):\n            self.post_message(f\"\\b {text!r}\")\n</code></pre>"},{"location":"4_apiref.html#debut.init_shell","title":"<code>init_shell(self)</code>","text":"<p>Customize the keymaps of the Shell.</p> Source code in <code>debut.py</code> <pre><code>def init_shell(self):\n    \"\"\"Customize the keymaps of the Shell.\n    \"\"\"\n    init_stc_interface(self)\n\n    @self.define_key('S-enter')  # cf. [C-RET] Shell.insertLineBreak\n    def open_line():\n        self.back_to_indentation()\n        p = self.cpos\n        self.insertLineBreak()\n        self.cpos = self.anchor = p\n\n    @self.define_key('M-enter')\n    @self.define_key('M-S-enter', clear=0)  # insert command\n    def duplicate_command(clear=True):\n        cmd = self.getMultilineCommand(rstrip=False)\n        if cmd:\n            self.mark = self.cpos\n            if clear:\n                self.clearCommand()  # =&gt; move to the prompt end\n            self.write(cmd, -1)\n\n    @self.define_key('f1')\n    def help(evt):\n        text = self.SelectedText or self.expr_at_caret\n        try:\n            obj = self.eval(text)\n            self.help(obj)\n        except Exception:\n            evt.Skip()\n\n    @self.define_key('f2')\n    def load_target():\n        text = self.SelectedText or self.expr_at_caret\n        if not text:\n            ## self.post_message(\"No target\")\n            obj = self.target\n        else:\n            try:\n                obj = self.eval(text)\n            except Exception as e:\n                self.post_message(f\"\\b failed: {e!r}\")\n                return\n        if self.parent.load(obj):\n            self.post_message(f\"\\b {text!r}\")\n        else:\n            self.post_message(f\"\\b {text!r} was nowhere to be found.\")\n\n    py_error_re = r' +File \"(.*?)\", line ([0-9]+)'\n    py_frame_re = r\" +file '(.*?)', line ([0-9]+)\"\n    py_where_re = r'&gt; +([^*?\"&lt;&gt;|\\r\\n]+?):([0-9]+)'\n    py_break_re = r'at ([^*?\"&lt;&gt;|\\r\\n]+?):([0-9]+)'\n    py_grep_re = '|'.join((py_frame_re, py_where_re, py_break_re))\n\n    @self.define_key('f4', pattern=py_error_re)\n    @self.define_key('f10', pattern=py_grep_re)\n    def grep_forward(pattern):\n        for err in self.grep_forward(pattern):\n            target = ':'.join(filter(None, err.groups()))\n            if self.parent.load(target):\n                self.post_message(f\"\\b {target}\")\n            break\n\n    @self.define_key('S-f4', pattern=py_error_re)\n    @self.define_key('S-f10', pattern=py_grep_re)\n    def grep_backward(pattern):\n        for err in self.grep_backward(pattern):\n            target = ':'.join(filter(None, err.groups()))\n            if self.parent.load(target):\n                self.post_message(f\"\\b {target}\")\n            break\n\n    @self.define_key('S-f12')\n    def clear_shell():\n        self.clear()\n\n    @self.define_key('C-f12')\n    def clone_shell():\n        self.parent.clone_shell(self.target)\n\n    @self.define_key('M-f12')\n    def close_shell():\n        self.parent.delete_shell(self)\n\n    @self.define_key('C-f2')\n    def HL():\n        try:\n            highlight(self.eval(self.expr_at_caret))\n        except Exception:\n            pass\n</code></pre>"},{"location":"4_apiref.html#debut.stylus","title":"<code>stylus(self)</code>","text":"<p>Stylize Nautilus window.</p> Note <p>This function is executed once at startup.</p> Source code in <code>debut.py</code> <pre><code>@ignore(UserWarning)\ndef stylus(self):\n    \"\"\"Stylize Nautilus window.\n\n    Note:\n        This function is executed once at startup.\n    \"\"\"\n    ## self.define_key('C-x o', self.load_session)\n    self.define_key('C-x s', self.save_session)\n\n    @self.define_key('Xbutton1', p=-1)\n    @self.define_key('Xbutton2', p=+1)\n    @self.define_key('C-x p', p=-1)\n    @self.define_key('C-x n', p=+1)\n    def other_editor(p=1):\n        \"\"\"Move focus to other topmost notebook page.\"\"\"\n        nb = self.FindFocus()\n        while isinstance(nb.Parent, wx.aui.AuiNotebook):\n            nb = nb.Parent\n        try:\n            if nb.PageCount &gt; 1:\n                nb.Selection = (nb.Selection + p) % nb.PageCount\n        except AttributeError:\n            pass\n\n    @self.define_key('M-left', p=-1)\n    @self.define_key('M-right', p=+1)\n    def other_window(p=1):\n        \"Move focus to other window\"\n        pages = [x for x in self.get_all_pages() if x.IsShownOnScreen()]\n        wnd = self.FindFocus()\n        while wnd:\n            if wnd in pages:\n                j = (pages.index(wnd) + p) % len(pages)\n                obj = pages[j]\n                if isinstance(obj, wx.aui.AuiNotebook):\n                    obj = obj.CurrentPage\n                obj.SetFocus()\n                break\n            wnd = wnd.Parent\n\n    @self.define_key('C-d')\n    @self.define_key('C-S-d', clear=0)  # insert line\n    def duplicate_line(clear=True):\n        \"\"\"Duplicate an expression at the caret-line.\"\"\"\n        buf = self.FindFocus()\n        if not isinstance(buf, wx.stc.StyledTextCtrl):\n            return\n        text = buf.SelectedText or buf.expr_at_caret or buf.topic_at_caret\n        if text:\n            shell = self.current_shell\n            buf.mark = buf.cpos\n            if clear:\n                shell.clearCommand()  # move to the prompt end\n            shell.write(text, -1)  # write at the end of command-line\n            shell.SetFocus()\n\n    ## Customize keymaps.\n    for page in self.get_all_editors():\n        init_editor(page)\n        for buf in page.get_all_buffers():\n            init_buffer(buf)\n\n    self.handler.unbind('buffer_new')\n    self.handler.bind('buffer_new', init_buffer)\n\n    for page in self.get_all_shells():\n        init_shell(page)\n\n    self.handler.unbind('shell_new')\n    self.handler.bind('shell_new', init_shell)\n\n    @self.define_key('C-x f11', win=self.ghost)\n    @self.define_key('C-x S-f11', win=self.watcher)\n    def toggle_pane(win):\n        pane = self._mgr.GetPane(win)\n        if pane.IsDocked():\n            ## toggle the pnae state to maximumized or not.\n            if self.console.IsShown():\n                self._mgr.MaximizePane(pane)\n            else:\n                self._mgr.RestoreMaximizedPane()\n            self._mgr.Update()\n</code></pre>"}]}